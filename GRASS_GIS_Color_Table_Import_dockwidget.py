# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GRASSGISColorTableImportDockWidget
                                 A QGIS plugin
 Module for loading and applying GRASS color table files to raster data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-04-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Josef Jehliƒçka
        email                : jehlijos@cvut.cz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, Qt
from qgis.utils import iface
from qgis.gui import QgsMessageBar
from qgis.core import Qgis, QgsMapLayerStyle
import tempfile
from .qgis_color_func import convert_color_table_grass_to_qgis
import shutil
from qgis.core import QgsProject
from PyQt5.QtGui import QIcon

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'GRASS_GIS_Color_Table_Import_dockwidget_base.ui'))


class GRASSGISColorTableImportDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(GRASSGISColorTableImportDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.RunButton.clicked.connect(self.Run)
        self.SaveFileCheckBox.stateChanged.connect(self.ToggleFileSave)
        self.SelectFileCheckBox.stateChanged.connect(self.ToggleFileSelect)
        self.OutputFileWidget.hide()
        self.OutputLocationLabel.hide()
        self.SelectFileWidget.hide()
        self.nonDefaultFileSelectedFlag = False

        # Get the path to the directory
        grass_dir = os.path.join(os.path.dirname(__file__), "input_tables", "grass")
        images_dir = os.path.join(os.path.dirname(__file__), "input_tables", "grass", "images")

        # Get a list of all file names in the directory
        file_names = os.listdir(grass_dir)

        # Add each file name to the GRASScomboBox
        for file_name in file_names:
            # Check if corresponding SVG or PNG file exists
            for extension in ['.svg', '.png']:
                icon_path = os.path.join(images_dir, file_name + extension)
                if os.path.exists(icon_path):
                    # Create a QIcon object for the corresponding SVG or PNG file
                    icon = QIcon(icon_path)

                    # Add the file name and icon to the combo box
                    self.GRASScomboBox.addItem(icon, file_name)
                    break  # If icon is found, no need to check for other extensions

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def ToggleFileSelect(self):
        if self.SelectFileCheckBox.isChecked():
            # enable SelectFileWidget
            self.SelectFileWidget.show()
            self.GRASScomboBox.setEnabled(False)
            self.nonDefaultFileSelectedFlag = True
        else:
            # disable SelectFileWidget
            self.SelectFileWidget.hide()
            self.GRASScomboBox.setEnabled(True)
            self.nonDefaultFileSelectedFlag = False

    def ToggleFileSave(self):
        if self.SaveFileCheckBox.isChecked():
            # enable OutputFileWidget
            self.OutputFileWidget.show()
            self.OutputLocationLabel.show()

        else:
            # disable OutputFileWidget
            self.OutputFileWidget.hide()
            self.OutputLocationLabel.hide()

    def Run(self):
        """
        Function to apply the selected GRASS color table to the selected raster layer.
        Optionally saves the QML file to the users machine
        :return:
        """
        # Get the selected layer from SelectLayerComboBox
        selectedLayer = self.SelectLayerComboBox.currentText()
        # Get the selected layer object
        try:
            selectedLayer = QgsProject.instance().mapLayersByName(selectedLayer)[0]
        except:
            iface.messageBar().pushMessage(
                "Error",
                "Please select a raster layer!",
                level=Qgis.Warning,
                duration=5
            )
            return

        # Add warning if no layer is selected
        if selectedLayer == "":
            iface.messageBar().pushMessage(
                "Error",
                "Please select a raster layer!",
                level=Qgis.Warning,
                duration=5
            )
            return

        # Get the input GRASS color table file
        if not self.nonDefaultFileSelectedFlag:
            # Get the selected GRASS color table from comboBox
            GRASStable = os.path.join(os.path.dirname(__file__), "input_tables", "grass",
                                      self.GRASScomboBox.currentText())

        else:
            # Get the selected GRASS color table from users defined file
            GRASStable = self.SelectFileWidget.filePath()

            # Add warning if no file is selected
            if GRASStable == "":
                iface.messageBar().pushMessage(
                    "Error",
                    "Please select a GRASS color table!",
                    level=Qgis.Warning,
                    duration=5
                )
                return

        # Create a temporary directory
        tempdir = tempfile.mkdtemp()
        Tempfile = os.path.join(tempdir, "tempfile.qml")
        # Get the selected color table type

        convert_color_table_grass_to_qgis(GRASStable, Tempfile)

        # Load the QML file
        selectedLayer.loadNamedStyle(Tempfile)

        # Refresh the layer to reflect the changes
        selectedLayer.triggerRepaint()

        # Save the QML file if SaveFileCheckBox is checked
        SaveFileCheckBox = self.SaveFileCheckBox.isChecked()

        if SaveFileCheckBox:
            # Save the QML file into users machine
            try:
                # Get the output file name
                OutputFilePathAndName = self.OutputFileWidget.filePath()
                # Copy the temporary file to the output file
                OutputFileName = os.path.normpath(OutputFilePathAndName)
                # if file does not have .qml extension raise warning
                if not OutputFileName.endswith(".qml"):
                    iface.messageBar().pushMessage(
                        "Warning",
                        "Your file IS SAVED but with unexpected extension! (.qml is expected)",
                        level=Qgis.Warning,
                        duration=5
                    )
                    return
                shutil.copyfile(Tempfile, OutputFileName)
            except:
                # Add warning if no or invalid file is selected
                iface.messageBar().pushMessage(
                    "Error",
                    "Please select a valid output path and file name!",
                    level=Qgis.Warning,
                    duration=5
                )
                return

        # remove temporary directory
        shutil.rmtree(tempdir)

        # Add success message
        iface.messageBar().pushMessage(
            "Success",
            "Color table applied successfully!",
            level=Qgis.Success,
            duration=5
        )
